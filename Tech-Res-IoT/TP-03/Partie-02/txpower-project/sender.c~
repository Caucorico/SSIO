/*
 * Copyright (c) 2006, Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 * $Id: hello-world.c,v 1.1 2006/10/02 21:46:46 adamdunkels Exp $
 */

/**
 * \file
 *         A very simple Contiki application showing how Contiki programs look
 * \author
 *         Adam Dunkels <adam@sics.se>
 */

 
/* Include required libraries, contiki.h is required for all.
   button-sensor.h, leds.h, rime.h and cc2420.h add button, 
   leds, rime and cc2420 radio functionalities, respectively. */
#include "contiki.h"
#include "net/rime.h"
#include "dev/leds.h"
#include "dev/cc2420.h"

#include <stdio.h> /* For printf() */
/*---------------------------------------------------------------------------*/

/* Declare a custom message type */
struct hw_msg {
  uint8_t count;
  uint8_t power;
  rimeaddr_t addr;
};

/*---------------------------------------------------------------------------*/
/* Process declarations */
PROCESS(sender_process, "Sender process");
AUTOSTART_PROCESSES(&sender_process);
/*---------------------------------------------------------------------------*/

/* A function to set the leds */
static void set_leds(int i){
  if (i & 0x1) {
    leds_on(LEDS_RED);
  } else {
    leds_off(LEDS_RED);
  }
  if (i & 0x2) {
    leds_on(LEDS_GREEN);
  } else {
    leds_off(LEDS_GREEN);
  }
  if (i & 0x4) {
    leds_on(LEDS_BLUE);
  } else {
    leds_off(LEDS_BLUE);
  }
}

/* A receiver callback function */
static void abc_recv(struct abc_conn *c){
  
}

/* Declare an abc callback and connection */
static const struct abc_callbacks abc_call = {abc_recv};
static struct abc_conn abc;

/*---------------------------------------------------------------------------*/
/* Process Thread for sender_process */
PROCESS_THREAD(sender_process, ev, data){ 
  static uint8_t i;
  static uint8_t counter;
  static uint8_t txpower; 
  static struct etimer et;

  PROCESS_EXITHANDLER(abc_close(&abc);)
  PROCESS_BEGIN();
  abc_open(&abc, 128, &abc_call);
  etimer_set(&et, CLOCK_SECOND);
  i = 0;
  txpower = 0;
  counter = 0;
  printf("Send counter!\n");

  while(1){
    PROCESS_WAIT_EVENT();

    /* Broadcast message every half a second */
    if (etimer_expired(&et)){
      struct hw_msg *snd;
      packetbuf_clear();
      snd = (struct hw_msg *)packetbuf_dataptr();
      rimeaddr_copy(&snd->addr, &rimeaddr_node_addr);
      txpower = i*4+3;
      cc2420_set_txpower(txpower);
      snd->count = counter;
      snd->power = cc2420_get_txpower();
      packetbuf_copyfrom(snd, sizeof(snd));
      abc_send(&abc);
      printf("Message Sent %d, %i, %i.\n", count++, txpower, snd->power);
      etimer_set(&et, CLOCK_SECOND/2);
      if (count % 32 == 0) {
        if (i < 7)
	        i++ ;
        else
	        i = 0 ;
        set_leds(i);
      }      
    }    
  }

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
